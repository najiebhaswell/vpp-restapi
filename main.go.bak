package main

import (
    "log"
    "net/http"

    "github.com/gin-gonic/gin"
    "go.fd.io/govpp/adapter/socketclient"
    "go.fd.io/govpp/core"
    vppinterface "vpp-restapi/binapi/interface"
    "vpp-restapi/binapi/interface_types"
    "vpp-restapi/binapi/vpe"
)

const vppSocket = "/run/vpp/api.sock"

func main() {
    log.Println("Starting VPP REST API server...")

    r := gin.Default()

    // Endpoint untuk mendapatkan versi VPP
    r.GET("/vpp/version", func(c *gin.Context) {
        log.Println("Handling /vpp/version request")
        adapter := socketclient.NewVppClient(vppSocket)
        conn, err := core.Connect(adapter)
        if err != nil {
            log.Printf("Failed to connect to VPP: %v", err)
            c.JSON(http.StatusInternalServerError, gin.H{"error": "connect failed", "details": err.Error()})
            return
        }
        defer conn.Disconnect()

        ch, err := conn.NewAPIChannel()
        if err != nil {
            log.Printf("Failed to create API channel: %v", err)
            c.JSON(http.StatusInternalServerError, gin.H{"error": "channel creation failed", "details": err.Error()})
            return
        }
        defer ch.Close()

        req := &vpe.ShowVersion{}
        reply := &vpe.ShowVersionReply{}

        if err := ch.SendRequest(req).ReceiveReply(reply); err != nil {
            log.Printf("API request failed: %v", err)
            c.JSON(http.StatusInternalServerError, gin.H{"error": "API request failed", "details": err.Error()})
            return
        }

        c.JSON(http.StatusOK, gin.H{
            "version":    reply.Version,
            "build_date": reply.BuildDate,
        })
    })

    // Endpoint untuk mendapatkan daftar antarmuka
    r.GET("/vpp/interfaces", func(c *gin.Context) {
        log.Println("Handling /vpp/interfaces request")
        adapter := socketclient.NewVppClient(vppSocket)
        conn, err := core.Connect(adapter)
        if err != nil {
            log.Printf("Failed to connect to VPP: %v", err)
            c.JSON(http.StatusInternalServerError, gin.H{"error": "connect failed", "details": err.Error()})
            return
        }
        defer conn.Disconnect()

        ch, err := conn.NewAPIChannel()
        if err != nil {
            log.Printf("Failed to create API channel: %v", err)
            c.JSON(http.StatusInternalServerError, gin.H{"error": "channel creation failed", "details": err.Error()})
            return
        }
        defer ch.Close()

        req := &vppinterface.SwInterfaceDump{}
        reply := &vppinterface.SwInterfaceDetails{}
        interfacesList := []map[string]interface{}{}

        reqCtx := ch.SendMultiRequest(req)
        for {
            stop, err := reqCtx.ReceiveReply(reply)
            if err != nil {
                log.Printf("API request failed: %v", err)
                c.JSON(http.StatusInternalServerError, gin.H{"error": "API request failed", "details": err.Error()})
                return
            }
            if stop {
                break
            }
            interfacesList = append(interfacesList, map[string]interface{}{
                "index":     reply.SwIfIndex,
                "admin_up":  reply.Flags&interface_types.IF_STATUS_API_FLAG_ADMIN_UP != 0,
                "link_up":   reply.Flags&interface_types.IF_STATUS_API_FLAG_LINK_UP != 0,
                "mtu":       reply.LinkMtu,
            })
        }

        c.JSON(http.StatusOK, gin.H{
            "interfaces": interfacesList,
        })
    })

    // Jalankan server
    log.Println("Starting server on :8080")
    if err := r.Run(":8080"); err != nil {
        log.Fatalf("Gagal menjalankan server: %v", err)
    }
}
